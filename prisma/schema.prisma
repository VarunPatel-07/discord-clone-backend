// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  FullName          String    @map("full_name") @db.VarChar(255)
  Email             String    @unique @map("email") @db.VarChar(255)
  UserName          String    @unique @map("username") @db.VarChar(255)
  Password          String    @map("password") @db.VarChar(255)
  Is_Online         Boolean   @default(false)
  Is_Email_Verified Boolean   @default(false)
  Profile_Picture   String    @map("profile_picture") @db.VarChar(255)
  servers           Server[]
  members           Member[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  channels          Channel[]

  notification    Notification[]
  requestsSend    User[]         @relation("UserRequests")
  requestReceived User[]         @relation("UserRequests")

  followers    User[] @relation("UserFollows")
  following    User[] @relation("UserFollows")
  blockedUsers User[] @relation("UserBlocks")
  blockedBy    User[] @relation("UserBlocks")
}

enum NotificationType {
  FOLLOW
  JOIN
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType @default(FOLLOW)
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
}

model Server {
  id         String @id @default(uuid())
  name       String @unique @db.VarChar(255)
  imageUrl   String @db.VarChar(255)
  inviteCode String @unique @db.VarChar(255)
  usersId    String @db.VarChar(500)
  users      User   @relation(fields: [usersId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]

  @@index([usersId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}
