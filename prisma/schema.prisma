// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  FullName            String    @map("full_name") @db.VarChar(255)
  Email               String    @unique @map("email") @db.VarChar(255)
  UserName            String    @unique @map("username") @db.VarChar(255)
  Password            String    @map("password") @db.VarChar(255)
  Is_Online           Boolean   @default(false)
  Is_Email_Verified   Boolean   @default(false)
  Profile_Picture     String    @map("profile_picture") @db.VarChar(255)
  servers             Server[]
  members             Member[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  channels            Channel[]
  ProfileBanner_Img   String    @db.VarChar(255)
  ProfileBanner_Color String    @db.VarChar(255)
  ProfileBgColor      String    @db.VarChar(255)
  TwoFactorAuth       Boolean   @default(false)

  notification         Notification[]
  requestsSend         User[]                 @relation("UserRequests")
  requestReceived      User[]                 @relation("UserRequests")
  ConversationIntiated OneToOneConversation[] @relation("sender")
  ConversationRecived  OneToOneConversation[] @relation("recever")
  followers            User[]                 @relation("UserFollows")
  following            User[]                 @relation("UserFollows")
  blockedUsers         User[]                 @relation("UserBlocks")
  blockedBy            User[]                 @relation("UserBlocks")

  DirectMessagesSender  DirectMessages[] @relation("sender")
  DirectMessagesRecever DirectMessages[] @relation("recever")

  @@unique([Email, UserName])
}

enum NotificationType {
  FOLLOW
  JOIN
  MESSAGE
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType @default(FOLLOW)
  message   String
  Is_Read   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
}

model Server {
  id                String  @id @default(uuid())
  name              String  @db.VarChar(255)
  imageUrl          String  @db.VarChar(255)
  inviteCode        String  @unique @db.VarChar(255)
  usersId           String  @db.VarChar(500)
  users             User    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  ServerBannerImg   String  @db.VarChar(255)
  ServerBannerColor String  @db.VarChar(255)
  public            Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]

  @@index([usersId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  Message                    GroupMessage[]
  GroupConversationSender    GroupConversation[] @relation("sender")
  GroupConversationreceivers GroupConversation[] @relation("receivers")
  GroupConversation          GroupConversation[]

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Message        GroupMessage[]
  DirectMessages DirectMessages[]

  @@index([userId])
  @@index([serverId])
}

model GroupMessage {
  id        String  @id @default(uuid())
  content   String  @db.Text
  FileURL   String  @db.Text
  IsEdited  Boolean @default(false)
  IsDeleted Boolean @default(false)
  DeletedBy String  @default("") @db.VarChar(255)
  Is_Reply  Boolean @default(false)

  memberId  String
  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  ServerGroupMessageReplies ServerGroupMessageReplies[]

  @@index([memberId])
  @@index([channelId])
}

model ServerGroupMessageReplies {
  id              String @id @default(uuid())
  MessageId       String
  Message         String @db.VarChar(255)
  ChannelId       String @db.VarChar(255)
  UserId          String @db.VarChar(255)
  UserName        String @db.VarChar(255)
  FullName        String @db.VarChar(255)
  Profile_Picture String @db.VarChar(255)

  ReplyingUser_UserName String @db.VarChar(255)

  Is_Deleted Boolean @default(false)
  Is_Edited  Boolean @default(false)

  GroupMessage GroupMessage @relation(fields: [MessageId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model OneToOneConversation {
  id             String           @id @default(uuid())
  SenderId       String
  Sender         User             @relation("sender", fields: [SenderId], references: [id], onDelete: Cascade)
  ReceiverId     String
  Recever        User             @relation("recever", fields: [ReceiverId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DirectMessages DirectMessages[]

  @@unique([SenderId, ReceiverId])
  @@index([SenderId])
  @@index([ReceiverId])
}

model GroupConversation {
  id       String   @id @default(uuid())
  SenderId String
  Sender   Member   @relation("sender", fields: [SenderId], references: [id], onDelete: Cascade)
  Receiver Member[] @relation("receivers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Member   Member @relation(fields: [memberId], references: [id])
  memberId String
}

model DirectMessages {
  id         String  @id @default(uuid())
  content    String  @db.Text
  FileURL    String  @db.Text
  IsEdited   Boolean @default(false)
  IsDeleted  Boolean @default(false)
  SenderId   String
  Sender     User    @relation("sender", fields: [SenderId], references: [id], onDelete: Cascade)
  ReceiverId String
  Recever    User    @relation("recever", fields: [ReceiverId], references: [id], onDelete: Cascade)

  ConversationId String
  Conversation   OneToOneConversation @relation(fields: [ConversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?

  @@unique([SenderId, ReceiverId])
  @@index([SenderId])
  @@index([ReceiverId])
}
