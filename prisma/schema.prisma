// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String    @id @default(uuid())
  FullName            String    @map("full_name") @db.VarChar(255)
  Email               String    @unique @map("email") @db.VarChar(255)
  UserName            String    @unique @map("username") @db.VarChar(255)
  Password            String    @map("password") @db.VarChar(255)
  Is_Online           Boolean   @default(false)
  Is_Email_Verified   Boolean   @default(false)
  Profile_Picture     String    @map("profile_picture") @db.VarChar(255)
  servers             Server[]
  members             Member[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  channels            Channel[]
  ProfileBanner_Img   String    @db.VarChar(255)
  ProfileBanner_Color String    @db.VarChar(255)
  ProfileBgColor      String    @db.VarChar(255)
  TwoFactorAuth       Boolean   @default(false)

  requestsSend         User[]                 @relation("UserRequests")
  requestReceived      User[]                 @relation("UserRequests")
  ConversationIntiated OneToOneConversation[] @relation("sender")
  ConversationRecived  OneToOneConversation[] @relation("recever")
  followers            User[]                 @relation("UserFollows")
  following            User[]                 @relation("UserFollows")
  blockedUsers         User[]                 @relation("UserBlocks")
  blockedBy            User[]                 @relation("UserBlocks")

  DirectMessagesSender   DirectMessages[] @relation("DirectMessagesSender")
  DirectMessagesReceiver DirectMessages[] @relation("DirectMessagesReceiver")

  NotificationSent     Notification[] @relation("SentNotifications")
  NotificationReceived Notification[] @relation("ReceivedNotifications")

  ReplyingToADirectMessage DirectMessages[] @relation("ReplyingMessageUser")

  @@unique([Email, UserName])
}

model Notification {
  id           String           @id @default(uuid())
  User_Id      String
  senderId     String
  receiverId   String?
  ServerId     String?
  ChannelId    String?
  sender       User             @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User?            @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
  channel_info Channel?         @relation(fields: [ChannelId], references: [id], onDelete: Cascade)
  type         NotificationType @default(FOLLOW)
  message      String
  Is_Read      Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([ChannelId])
}

enum NotificationType {
  FOLLOW
  NORMAL
  MESSAGE
  FRIEND_REQUEST
  ERROR
}

enum MessageType {
  IMAGE
  FILE
  MESSAGE
}

model Server {
  id                String  @id @default(uuid())
  name              String  @db.VarChar(255)
  imageUrl          String  @db.VarChar(255)
  inviteCode        String  @unique @db.VarChar(255)
  usersId           String  @db.VarChar(500)
  users             User    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  ServerBannerImg   String  @db.VarChar(255)
  ServerBannerColor String  @db.VarChar(255)
  public            Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]

  @@index([usersId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  Message                    GroupMessage[]
  GroupConversationSender    GroupConversation[] @relation("sender")
  GroupConversationreceivers GroupConversation[] @relation("receivers")
  GroupConversation          GroupConversation[]

  ReplyingToUsersMessage GroupMessage[] @relation("ReplyingToUser")

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Message   GroupMessage[]

  Notification Notification[]

  @@index([userId])
  @@index([serverId])
}

model GroupMessage {
  id                       String      @id @default(uuid())
  content                  String      @db.Text
  FileURL                  String      @db.Text
  ImageUrl                 String      @db.Text
  IsEdited                 Boolean     @default(false)
  IsDeleted                Boolean     @default(false)
  DeletedBy                String      @default("") @db.VarChar(255)
  Is_Reply                 Boolean     @default(false)
  MessageType              MessageType @default(MESSAGE)
  memberId                 String
  member                   Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId                String
  channel                  Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  replyingMessage          String?     @db.Text
  replyingToUser_MemberId  String?
  replyingToUser           Member?     @relation("ReplyingToUser", fields: [replyingToUser_MemberId], references: [id], onDelete: Cascade)
  replyingMessageMessageId String?     @db.Text
  replyingImage            String?     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
  @@index([replyingToUser_MemberId])
}

model OneToOneConversation {
  id             String           @id @default(uuid())
  SenderId       String
  Sender         User             @relation("sender", fields: [SenderId], references: [id], onDelete: Cascade)
  ReceiverId     String
  Recever        User             @relation("recever", fields: [ReceiverId], references: [id], onDelete: Cascade)
  LatestMessage  String           @default("")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DirectMessages DirectMessages[]

  @@unique([SenderId, ReceiverId])
  @@index([SenderId])
  @@index([ReceiverId])
}

model GroupConversation {
  id       String   @id @default(uuid())
  SenderId String
  Sender   Member   @relation("sender", fields: [SenderId], references: [id], onDelete: Cascade)
  Receiver Member[] @relation("receivers")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Member   Member @relation(fields: [memberId], references: [id])
  memberId String

  @@index([SenderId])
  @@index([memberId])  // Add this index
}

model DirectMessages {
  id             String               @id @default(uuid())
  content        String               @db.Text
  FileURL        String               @db.Text
  IsEdited       Boolean              @default(false)
  IsDeleted      Boolean              @default(false)
  ImageUrl       String               @db.Text
  ConversationId String
  Conversation   OneToOneConversation @relation(fields: [ConversationId], references: [id], onDelete: Cascade)
  IsMessageReply Boolean              @default(false)

  SenderId String
  Sender   User   @relation("DirectMessagesSender", fields: [SenderId], references: [id], onDelete: Cascade)

  ReceiverId String
  Receiver   User   @relation("DirectMessagesReceiver", fields: [ReceiverId], references: [id], onDelete: Cascade)

  DeletedBy String @default("") @db.VarChar(255)

  replyingMessageContent String? @db.Text
  replyingToUser_UserId  String?
  replyingToUser         User?   @relation("ReplyingMessageUser", fields: [replyingToUser_UserId], references: [id], onDelete: Cascade)

  replyingMessage_MessageId String?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([replyingToUser_UserId])
  @@index([ReceiverId])
  @@index([SenderId])
  @@index([ConversationId])
}
